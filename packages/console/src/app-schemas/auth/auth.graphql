

input AuthInput {
	email: String!
	password: String!
}
input SignupInput {
	email: String!
	password: String!
	displayName: String!
	phoneNumber: String!
	gender: Gender!
	dateOfBirth: DateTime!
	avator:Upload
}
enum AuthMode{
	EMAIL
	PHONE
	OAUTH
}

type AuthResult {
	token: String
	status: Boolean!
	message: String!
	data: User 
}
type SignOutResult {
	status: Boolean
	message: String
}
extend type User{
	online: Boolean
}
extend type Mutation {
	signup(credentials: SignupInput!,organization:OrganizationCreateWithoutOwnerInput): AuthResult!
	signin(credentials: AuthInput!): AuthResult!
	recoverAccount(email: String!): AuthResult!
	signout: SignOutResult!	
}