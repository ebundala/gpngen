// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Tenant {
  id   String  @id @default(cuid())
  name String?
  url  String
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  displayName   String
  phoneNumber   String?
  emailVerified Boolean       @default(false)
  disabled      Boolean       @default(true)
  avator        Attachment?   @relation(fields: [avatorId], references: [id])
  avatorId      String?
  role          Role          @default(USER)
  state         State         @default(PENDING)
  forms         Form[]
  responses     Response[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  forums        Forum[]
  forumAnswers  ForumAnswer[]
  comments      Comment[]

}

model Attachment {
  id               String          @id @default(cuid())
  path             String
  filename         String?
  mimetype         String?
  encoding         String?
  duration         Int             @default(0)
  size             Int             @default(0)
  attachmentType   AttachmentType  @default(IMAGE)
  downloadable     Boolean         @default(false)
  placement        String          @default("default")
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  User             User[]
  Form             Form?           @relation(fields: [formId], references: [id])
  formId           String?
  Grade            Grade?          @relation(fields: [gradeId], references: [id])
  gradeId          String?
  Response         Response?       @relation(fields: [responseId], references: [id])
  responseId       String?
  Question         Question?       @relation(fields: [questionId], references: [id])
  questionId       String?
  Answer           Answer?         @relation(fields: [answerId], references: [id])
  answerId         String?
  Recommendation   Recommendation? @relation(fields: [recommendationId], references: [id])
  recommendationId String?
  Forum            Forum?          @relation(fields: [forumId], references: [id])
  forumId          String?
  ForumAnswer      ForumAnswer?    @relation(fields: [forumAnswerId], references: [id])
  forumAnswerId    String?
  Comment          Comment?        @relation(fields: [commentId], references: [id])
  commentId        String?
  FormCategory     FormCategory[]

}

model FormCategory {
  id           String      @id @default(cuid())
  name         String
  description  String?
  image        Attachment? @relation(fields: [attachmentId], references: [id])
  state        State       @default(PENDING)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  attachmentId String?
  form         Form[]

}

model Form {
  id             String        @id @default(cuid())
  title          String
  description    String?
  state          State         @default(PENDING)
  author         User          @relation(fields: [authorId], references: [id])
  authorId       String
  category       FormCategory? @relation(fields: [formCategoryId], references: [id])
  questions      Question[]
  grades         Grade[]
  responses      Response[]
  attachments    Attachment[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  formCategoryId String?

}

model Grade {
  id              String           @id @default(cuid())
  name            String
  description     String
  form            Form             @relation(fields: [formId], references: [id])
  formId          String
  responses       Response[]
  recommendations Recommendation[]
  questions       Question[]
  min             Float
  max             Float
  minInclusive    Boolean          @default(false)
  maxInclusive    Boolean          @default(false)
  attachments     Attachment[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

}

model Response {
  id          String       @id @default(cuid())
  author      User         @relation(fields: [authorId], references: [id])
  authorId    String
  form        Form         @relation(fields: [formId], references: [id])
  formId      String
  answers     Answer[]
  grade       Grade?       @relation(fields: [gradeId], references: [id])
  gradeId     String?
  attachments Attachment[]
  state       State        @default(PENDING)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

}

model Question {
  id             String       @id @default(cuid())
  questionNumber Int
  question       String
  weight         Float        @default(0.0)
  instruction    String?
  questionType   QuestionType @default(BOOLEAN)
  form           Form         @relation(fields: [formId], references: [id])
  formId         String
  grade          Grade        @relation(fields: [gradeId], references: [id])
  gradeId        String
  answers        Answer[]
  attachments    Attachment[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

}

model Answer {
  id           String       @id @default(cuid())
  response     Response     @relation(fields: [responseId], references: [id])
  responseId   String
  question     Question     @relation(fields: [questionId], references: [id])
  questionId   String
  attachments  Attachment[]
  booleanValue Boolean?
  textValue    String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

}

model Recommendation {
  id          String       @id @default(cuid())
  content     String
  attachments Attachment[]
  grade       Grade        @relation(fields: [gradeId], references: [id])
  gradeId     String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

}

// use boolean and text question first for POC
enum QuestionType {
  BOOLEAN
  TEXT
}

enum Role {
  USER
  ADMIN
  MODERATOR
  ORGANIZATION
}

enum State {
  PENDING
  REVIEW
  REJECTED
  APPROVED
  COMPLETED
  ARCHIVED
}

enum AttachmentType {
  AUDIO
  VIDEO
  DOCUMENT
  IMAGE
}

// forum part

model Forum {
  id              String        @id @default(cuid())
  question        String
  description     String
  author          User          @relation(fields: [authorId], references: [id])
  authorId        String
  state           State         @default(PENDING)
  forumAnswers    ForumAnswer[]
  comments        Comment[]
  commentsEnabled Boolean       @default(false)
  attachments     Attachment[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

}

model ForumAnswer {
  id              String       @id @default(cuid())
  author          User         @relation(fields: [authorId], references: [id])
  authorId        String
  forum           Forum        @relation(fields: [forumId], references: [id])
  forumId         String
  attachments     Attachment[]
  comments        Comment[]
  commentsEnabled Boolean      @default(false)
  state           State        @default(PENDING)
  content         String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

}

model Comment {
  id              String       @id @default(cuid())
  author          User         @relation(fields: [authorId], references: [id])
  authorId        String
  attachments     Attachment[]
  comments        Comment[]    @relation("CommentToComment")
  commentsEnabled Boolean      @default(false)
  content         String
  state           State        @default(PENDING)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  forum           Forum?       @relation(fields: [forumId], references: [id])
  forumId         String?
  forumAnswer     ForumAnswer? @relation(fields: [forumAnswerId], references: [id])
  forumAnswerId   String?
  comment         Comment?     @relation("CommentToComment", fields: [commentId], references: [id])
  commentId       String?

}

//casbin table

model CasbinRule {
  id    Int     @id @default(autoincrement())
  ptype String
  v0    String?
  v1    String?
  v2    String?
  v3    String?
  v4    String?
  v5    String?

  @@map("casbin_rule")
}
