# This is a basic workflow to help you get started with Actions

name: CI Prod

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: create oci dir
        run: mkdir oci
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build Docker image        
        uses: docker/build-push-action@v2.4.0
        with:
            # List of extra privileged entitlement (eg. network.host,security.insecure)
            # allow: # optional
            # # List of build-time variables
             build-args: GOOGLE_APPLICATION_CREDENTIALS=${{secrets.FIREBASE_ADM_FILE}} # optional
            # # Builder instance
            # builder: # optional
            # # List of external cache sources for buildx (eg. user/app:cache, type=local,src=path/to/dir)
            # cache-from: # optional
            # # List of cache export destinations for buildx (eg. user/app:cache, type=local,dest=path/to/dir)
            # cache-to: # optional
            # # Build's context is the set of files located in the specified PATH or URL
             context: "./packages/console" # optional
            # # Path to the Dockerfile
             file: "./packages/console/Dockerfile" # optional
            # # List of metadata for an image
             labels: "itahuduma" # optional
            # # Load is a shorthand for --output=type=docker
            # load: # optional, default is false
            # # Set the networking mode for the RUN instructions during build
            # network: # optional
            # # Do not use cache when building the image
             no-cache: true # optional, default is false
            # # List of output destinations (format: type=local,dest=path)
             outputs: "type=docker,dest=./oci/app.tar" # optional
            # # List of target platforms for build
            # platforms: # optional
            # # Always attempt to pull a newer version of the image
            # pull: # optional, default is false
            # # Push is a shorthand for --output=type=registry
            # push: # optional, default is false
            # # List of secrets to expose to the build (eg. key=string, GIT_AUTH_TOKEN=mytoken)
            # secrets: # optional
            # # List of secret files to expose to the build (eg. key=filename, MY_SECRET=./secret.txt)
            # secret-files: # optional
            # # List of SSH agent socket or keys to expose to the build
            # ssh: # optional
            # # List of tags
             tags: "itahuduma:latest" # optional
            # # Sets the target stage to build
            # target: # optional
            # # GitHub Token used to authenticate against a repository for Git context
            # github-token: # optional, default is ${{ github.token }}
      - name: Copy app image files to remote
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          port: ${{ secrets.PORT }}
          passphrase: ${{secrets.PASSPHRASE }}
          key: ${{ secrets.SSHKEY }}
          source: "./oci"
          target: "/home/${{ secrets.USERNAME }}/app/"

      - name: Copy webserver files to remote
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          port: ${{ secrets.PORT }}
          passphrase: ${{secrets.PASSPHRASE }}
          key: ${{ secrets.SSHKEY }}
          source: "./webserver"
          target: "/home/${{ secrets.USERNAME }}/app/"

      - name: Copy pgbouncer files to remote
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          port: ${{ secrets.PORT }}
          passphrase: ${{secrets.PASSPHRASE }}
          key: ${{ secrets.SSHKEY }}
          source: "./pgbouncer"
          target: "/home/${{ secrets.USERNAME }}/app/"
          
      - name: Copy docker files to remote
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          port: ${{ secrets.PORT }}
          passphrase: ${{secrets.PASSPHRASE }}
          key: ${{ secrets.SSHKEY }}
          source: "./docker-compose.prod.yml"
          target: "/home/${{ secrets.USERNAME }}/app/"

      - name: Copy scripts files to remote
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          port: ${{ secrets.PORT }}
          passphrase: ${{secrets.PASSPHRASE }}
          key: ${{ secrets.SSHKEY }}
          source: "./scripts"
          target: "/home/${{ secrets.USERNAME }}/app/"
  
      - name: BUILD SERVER        
        uses: appleboy/ssh-action@master
        env:
          PRISMA_ENV: ${{ secrets.PRISMA_ENV }}
          SERVER_ENV:  ${{ secrets.SERVER_ENV }}
          FIREBASE_ADM_AC: ${{secrets.FIREBASE_ADM_AC}}
          SERVER_CONF: ${{ secrets.SERVER_CONF }}
          PGBOUNCER_CONF: ${{ secrets.PGBOUNCER_CONF }}
          PGBOUNCER_USERLIST: ${{ secrets.PGBOUNCER_USERLIST }}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          port: ${{ secrets.PORT }}
          passphrase: ${{ secrets.PASSPHRASE }}
          key: ${{ secrets.SSHKEY }}
          script: |
           cd /home/${{ secrets.USERNAME }}/app
           docker load -i oci/app.tar
           mkdir -p console/prisma
           chmod +x scripts/stackdeploy
           chmod +x scripts/stackdown
           chmod +x scripts/create_file
            
           ./scripts/create_file  console/prisma/.env "${{env.PRISMA_ENV}}" 
              
           ./scripts/create_file   console/${{ secrets.FIREBASE_ADM_FILE }} "${{env.FIREBASE_ADM_AC}}"
           ./scripts/create_file .env "${{ env.SERVER_ENV}}"
           ./scripts/create_file  webserver/nginx-conf/nginx.conf "${{env.SERVER_CONF}}"
           ./scripts/create_file  pgbouncer/conf/pgbouncer.ini "${{env.PGBOUNCER_CONF}}"
           ./scripts/create_file  pgbouncer/conf/userlist.txt "${{env.PGBOUNCER_USERLIST}}"
            ./scripts/stackdown certbot
            ./scripts/stackdown itahuduma
           ./scripts/stackdeploy prod itahuduma

