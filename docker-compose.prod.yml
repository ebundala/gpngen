version: "3.1"

services:
  db:
    image: ${POSTGRES_TAG}
    container_name: db   
    volumes:
      - PGDATA:/var/lib/postgresql/data
    networks:
      webnet:
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: ${PGDATA}
    deploy:
      replicas: 1
      # resources:
      #   limits:
      #     cpus: "1"
      #     memory: 1g
      restart_policy:
        condition: on-failure
  # pgbouncer:
  #   image: "bitnami/pgbouncer:latest"
  #   environment:
  #     POSTGRESQL_USERNAME: ${POSTGRES_USER} #Backend PostgreSQL username. Default: postgres.
  #     POSTGRESQL_PASSWORD: ${POSTGRES_PASSWORD} #Backend PostgreSQL password. No defaults.
  #     POSTGRESQL_DATABASE: ${POSTGRES_DB} #Backend PostgreSQL Database name to connect to. Default: postgres.
  #     POSTGRESQL_HOST: db #Backend PostgreSQL hostname. Default: postgresql.
  #     POSTGRESQL_PORT: ${POSTGRES_PORT} #Backend PostgreSQL port. Default: 5432.
  #   #  PGBOUNCER_EXTRA_ARGS: "--verbose"
  #   depends_on:
  #     - db
  #   networks:
  #     webnet:
  #   deploy:
  #     replicas: 1
  #     resources:
  #       limits:
  #         cpus: "1"
  #         memory: 1g
  #     restart_policy:
  #       condition: on-failure
  #   ports:
  #     - 6432:6432
  #   volumes:
  #     - ./pgbouncer/:/bitnami/pgbouncer/
 
  
  app:
    image: ${NODE_TAG}
    container_name: itahuduma
    working_dir: /home/app/packages/console    
    environment:
     # google credentials
       GOOGLE_APPLICATION_CREDENTIALS: ${GOOGLE_APPLICATION_CREDENTIALS}
       FIREBASE_API_KEY: ${FIREBASE_API_KEY}
       STORAGE_BUCKET: ${STORAGE_BUCKET}
       FIREBASE_PROJECT_ID: ${FIREBASE_PROJECT_ID}
      #sendgrid email
       SENDGRID_API_KEY: ${SENDGRID_API_KEY}
       SENDGRID_SENDER_EMAIL: ${SENDGRID_SENDER_EMAIL}
       SENDGRID_ACCOUNT_ACTIVATION_TEMPLATE: ${SENDGRID_ACCOUNT_ACTIVATION_TEMPLATE}
       SENDGRID_ACCOUNT_DEACTIVATION_TEMPLATE: ${SENDGRID_ACCOUNT_DEACTIVATION_TEMPLATE}
       SENDGRID_WELCOME_TEMPLATE: ${SENDGRID_WELCOME_TEMPLATE}
    command: yarn run start:docker:prod
    depends_on:
      - db         
    volumes:
      - ./:/home/app
    networks:
      webnet:

    deploy:
      replicas: 2
      # resources:
      #   limits:
      #    cpus: "1"
      #    memory: 1g
      restart_policy:
        condition: on-failure
  webserver:
    image: nginx:mainline-alpine
    container_name: webserver
    ports:
      - "80:80"
    volumes:
      - ./webserver/web-root:/var/www/html
      - ./webserver/nginx-conf/nginx-conf:/etc/nginx/conf.d
      - ./webserver/certbot/certbot-etc:/etc/letsencrypt
      - ./webserver/certbot/certbot-var:/var/lib/letsencrypt
    depends_on:
      - app
    networks:
      webnet:
    deploy:
      replicas: 1
      # resources:
      #  limits:
      #    cpus: "1"
      #    memory: 1g
      restart_policy:
        condition: on-failure
        
  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./webserver/certbot/certbot-etc:/etc/letsencrypt
      - ./webserver/certbot/certbot-var:/var/lib/letsencrypt
      - ./webserver/web-root:/var/www/html
    depends_on:
      - webserver
    command: certonly --webroot --webroot-path=/var/www/html --email ${DOMAINS_EMAIL} --agree-tos --no-eff-email ${CERTBOT_ENV} ${DOMAINS}
networks:
  webnet:
volumes:
  PGDATA:
